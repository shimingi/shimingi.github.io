<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>售前的基本知识</title>
      <link href="/2020/05/28/%E5%94%AE%E5%89%8D%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3(day02)/"/>
      <url>/2020/05/28/%E5%94%AE%E5%89%8D%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BA%86%E8%A7%A3(day02)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-互联网有哪些岗位，以及岗位职责是什么？"><a href="#1-互联网有哪些岗位，以及岗位职责是什么？" class="headerlink" title="1.互联网有哪些岗位，以及岗位职责是什么？"></a>1.互联网有哪些岗位，以及岗位职责是什么？</h1><ul><li>老板：提出需求</li><li>产品：产品就是将客户或者老板的需求转变成一个真实可见的原型</li><li>开发：前端、后台根据要求开发相应的程序</li><li>客服：拨打接听400电话，客服会根据你的业务需求，指派对应的售前工程师介绍产品</li><li>售前工程师：携带售前产品文档和产品宣讲的PPT，为客户讲解产品，吸引客户，促成购买<ul><li>学习公司产品</li><li>了解客户需求</li><li>到客户现场给客户讲解公司产品，让客户熟悉产品，以获取客户需求，如果客户有需求，将会提出相应的解决方案</li><li>多次给客户讲解，吸引客户试用，如果有问题，及时给客户答疑</li><li>客户满意的话就会购买产品，我们们需要跟进项目的整个实施到交付</li></ul></li><li>实施工程师：把产品部署到客户的服务器中其中包括：<ul><li>私有化部署：在客户的服务器中部署产品</li><li>非私有化部署：把产品部署到 私有云，客户只能通过一个url地址访问服务即可</li></ul></li><li>售后（技术支持）<ul><li>教会客户使用我们的产品</li><li>实施团队遇到的问题我们也提供技术支持</li><li>联系开发团队，反应用户提出的bug</li></ul></li></ul><h1 id="2-什么是售前？"><a href="#2-什么是售前？" class="headerlink" title="2.什么是售前？"></a>2.什么是售前？</h1><p>售前是指与客户签合同前的阶段。大致包括线索获取、客户交流、提供技术方案、应标、签合同等流程。</p><p>售前又分为产品型售前,方案型售前和区域售前</p><ul><li><p>产品型售前即公司有了产品以后，协助销售将产品推销给客户。</p><ul><li>软件型售前</li><li>硬件公司售前</li></ul></li><li><p>方案型售前是指根据客户的需求进行开发，为用户所需要的产品提供解决方案</p></li><li><p>区域售前更贴近客户，更了解客户需求。</p></li></ul><h1 id="3-售前岗位的职责"><a href="#3-售前岗位的职责" class="headerlink" title="3.售前岗位的职责"></a>3.售前岗位的职责</h1><p>售前的基本职责是协助销售完成项目签单，售前的工作主要围绕项目生命周期开展。</p><ul><li>解决方案规划：需发掘行业诉求、问题和痛点，整理行业解决方案和最佳实践，进行解决方案规划、设计；</li><li>技术交流：协助销售同目标客户进行技术交流，讲解公司现有的解决方案和案例，并在交流中了解客户的需求；</li><li>编制解决方案：基于客户需求编写解决方案。</li><li>方案讲解(PPT)：负责为客户讲解、演示方案，并引导用户认同技术方案</li><li>编写技术文档(Word)：如方案被客户认可，需要提供技术文档，如：技术规范书、可研材料、工作量评估材料等等</li><li>投标支撑：负责协助销售完成投标工作，主要负责技术分册、商务分册的编制，并到投标现场进行述标、答辩等工作。</li></ul><h1 id="4-售前要掌握的技能"><a href="#4-售前要掌握的技能" class="headerlink" title="4.售前要掌握的技能"></a>4.售前要掌握的技能</h1><ol><li>懂产品：售前必须对自家公司的产品、方案非常熟悉，尤其是自己所负责的产品、项目；并对友商的产品、方案有所了解；</li><li>懂商务：售前要熟悉签单、招投标流程；要了解客户单位的组织架构、决策流程、关键人等情况；</li><li>懂业务：售前要对自己负责的行业有所了解，对具体服务的客户业务要非常熟悉；</li><li>懂技术：售前要掌握基本的硬件、网络、软件开发、数据库等知识；并且经常对可能涉及的新技术进行学习，如云计算、区块链、AI、AR、5G等；</li><li>懂需求：需求工作是售前的基本功，售前需要掌握需求调研、需求分析 、需求方案编制、需求评审、需求交底、需求挖掘等技能。</li><li>知趋势：售前要了解业界最新进展和发展方向，了解行业痛点和诉求；对行业有较强的洞察力和敏感度。</li><li>会规划：高级售前、解决方案专家、解决方案架构师等，需要会规划产品、会做顶层设计；</li><li>能写：售前的主要工作内容就是写材料。所以要具备文字表达能力，能够撰写各种类型的文档；</li><li>会说：售前要会讲方案，并且具备良好的沟通能力，能与客户、团队有效沟通；</li></ol><p>售前还需要不断学习能力，抗压能力，协调能力应变能力和引导能力</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>轮播图的使用</title>
      <link href="/2020/05/11/%E8%BD%AE%E6%92%AD%E5%9B%BE%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/11/%E8%BD%AE%E6%92%AD%E5%9B%BE%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="为什么需要设置轮播图"><a href="#为什么需要设置轮播图" class="headerlink" title="为什么需要设置轮播图?"></a>为什么需要设置轮播图?</h2><p>实际上淘宝轮播图是展示产品的图片，它是根据时间段来展示，这样就便于买家看到更多的图片，从而达到对产品本身信息有一个充分了解的目的，就像淘宝视频一样，买家也可以通过动态来了解产品。</p><p>淘宝轮播图其实就是展示给买家看图片的一种动态形式，方便更多的买家了解店铺里面的产品，这也是一种宣传的手段，让买家可以在最短的时间内看到更多的产品图片，从而加快，她们到店的时间，所以设置轮播图也是非常有用的。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;carousel-item active&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--轮播图--&gt;</span><br><span class="line"></span><br><span class="line">&lt;Carousel @change&#x3D;&quot;changeimg&quot; @click&#x3D;&quot;clickimg&quot; pageTheme&#x3D;&quot;circle&quot; :datas&#x3D;&quot;imgs&quot;&gt;&lt;&#x2F;Carousel&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    imgs:[</span><br><span class="line"></span><br><span class="line">      &#123;</span><br><span class="line">      title:&#39;广告活动页&#39;,</span><br><span class="line">      link:&#39;http:&#x2F;&#x2F;www.baidu.com&#39;,</span><br><span class="line">      image:&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;static&#x2F;img&#x2F;placeholder-jacket.f5996c6.png&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">      title:&#39;促销活动页&#39;,</span><br><span class="line">      link:&#39;http:&#x2F;&#x2F;www.163.com&#39;,</span><br><span class="line">      image:&#39;http:&#x2F;&#x2F;localhost:8080&#x2F;static&#x2F;img&#x2F;placeholder-product.1011f1b.jpg&#39;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ]</span><br><span class="line">    </span><br><span class="line">    &#125;，</span><br><span class="line">    methods:&#123;</span><br><span class="line">    &#x2F;&#x2F;获取轮播图接口</span><br><span class="line">  get_carousel:function()&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;发送请求</span><br><span class="line">  this.axios.get(&#39;http:&#x2F;&#x2F;localhost:8000&#x2F;getcarousel&#x2F;&#39;).then((result) &#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">  console.log(result);</span><br><span class="line"></span><br><span class="line">  var mylist &#x3D; [];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;遍历数组</span><br><span class="line">  for(let i&#x3D;0,l&#x3D;result.data.length;i&lt;l;i++)&#123;</span><br><span class="line"></span><br><span class="line">  mylist.push(&#123;title:result.data[i].name,link:result.data[i].src,image:result.data[i].img&#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.img &#x3D; mylist;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;点击轮播图</span><br><span class="line">  clickimg:function(index,data)&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;alert(data.link);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;跳转</span><br><span class="line">  window.location.href &#x3D; data.link;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;切换轮播图</span><br><span class="line">  changeimg:function(index,data)&#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;console.log(data);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>序列化器和黑夜白天切换</title>
      <link href="/2020/05/10/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
      <url>/2020/05/10/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#导包 drf框架中用序列化</span><br><span class="line">from rest_framework import serializers</span><br><span class="line">#导入需要序列化的表</span><br><span class="line">from myapp.models import Carousel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#建立序列化类</span><br><span class="line">class CarouselSer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        #序列换那张表</span><br><span class="line">        model &#x3D; Carousel</span><br><span class="line">        #序列换所有</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br></pre></td></tr></table></figure><p>视图里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from myapp.myser import CarouselSer</span><br><span class="line"></span><br><span class="line">class GetCarousel(APIView):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        #读库</span><br><span class="line">        carousels &#x3D; Carousel.objects.all()</span><br><span class="line"></span><br><span class="line">        #序列化操作  在拿多条数据的时候记得加many&#x3D;True  记得每条数据的字段名要与库中一致不然会报错 即使报错也找不到是哪里的错 所以要保证 字段与数据库保持一致</span><br><span class="line">        carousels_ser &#x3D; CarouselSer(carousels,many&#x3D;True)</span><br><span class="line"></span><br><span class="line">        return Response(carousels_ser.da</span><br></pre></td></tr></table></figure><h2 id="黑夜白天模式切换"><a href="#黑夜白天模式切换" class="headerlink" title="黑夜白天模式切换"></a>黑夜白天模式切换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;要在颜色样式中 把写死的颜色改成变量</span><br><span class="line">&#x2F;&#x2F;找到相应的 控制该页面的 控制颜色的CSS文件</span><br><span class="line">&#x2F;&#x2F;定义变量</span><br><span class="line">&#x2F;&#x2F;需要改那个就需要声明定义变量  下面使用</span><br><span class="line"> :root&#123;</span><br><span class="line">  --bg-color:#fff;</span><br><span class="line">  --a-color:black;</span><br><span class="line">&#125;</span><br><span class="line">.nav_text &#123;</span><br><span class="line">  color: var(--a-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;比如</span><br><span class="line">a.navbar-brand, a.logo &#123;</span><br><span class="line">  font-family: &quot;Lato&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;</span><br><span class="line">  color: var(--a-color);  &#x2F;&#x2F;这本来是一个固定的颜色  现在改为变量</span><br><span class="line">  font-size: 2rem;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin-top: 0; &#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  &#x2F; 使用变量 &#x2F;</span><br><span class="line">  background:var(--bg-color);</span><br><span class="line">  min-height: 7em;</span><br><span class="line">  height: auto;</span><br><span class="line">  border-radius: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  color: #444342;</span><br><span class="line">  padding-top: 1em;</span><br><span class="line">  padding-bottom: 1em;</span><br><span class="line">  border-bottom: 1px solid rgba(0, 0, 0, 0.05); &#125;</span><br><span class="line">  .header li.nav-item &#123;</span><br><span class="line">    font-size: 1.05em;</span><br><span class="line">    margin-left: .5em;</span><br><span class="line">    padding: .75em .35em; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;都是页面样式 控制 页面的颜色直接都改为定义到的变量</span><br><span class="line">.carousel &#123;</span><br><span class="line">  background:var(--bg-color);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在需要的页面 进行控制</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写一个切换按钮</span><br><span class="line">&lt;h-switch v-model&#x3D;&quot;style&quot; @change&#x3D;&quot;change_back&quot; &gt;&#123;&#123;style_night&#125;&#125;&lt;&#x2F;h-switch&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义变量  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;夜间模式切换按钮信息</span><br><span class="line">  style_night:&#39;夜间模式&#39;,</span><br><span class="line">  style:0,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按钮切换主题颜色方法</span><br><span class="line">  change_back:function()&#123;</span><br><span class="line">console.log(this.style)</span><br><span class="line">  if(this.style&#x3D;&#x3D;true)&#123;</span><br><span class="line">    &#x2F;&#x2F;获取样式表 所有节点</span><br><span class="line">var styles &#x3D; getComputedStyle(document.documentElement)</span><br><span class="line">&#x2F;&#x2F;动态更改 背景颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--bg-color&quot;,&quot;#292a2d&quot;);</span><br><span class="line">&#x2F;&#x2F;字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--a-color&quot;,&quot;white&quot;)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  &#x2F;&#x2F;获取样式表 所有节点</span><br><span class="line">var styles &#x3D; getComputedStyle(document.documentElement)</span><br><span class="line">&#x2F;&#x2F;动态更改 背景颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--bg-color&quot;,&quot;white&quot;);</span><br><span class="line">&#x2F;&#x2F;字体颜色</span><br><span class="line">document.documentElement.style.setProperty(&quot;--a-color&quot;,&quot;black&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python操作Redis的5种数据类型</title>
      <link href="/2020/05/08/Python%E6%93%8D%E4%BD%9CRedis%E7%9A%845%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/05/08/Python%E6%93%8D%E4%BD%9CRedis%E7%9A%845%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br></pre></td></tr></table></figure><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#定义ip和端口</span><br><span class="line">host &#x3D; &#39;localhost&#39;</span><br><span class="line">port &#x3D; 6379</span><br><span class="line"></span><br><span class="line">#建立连接</span><br><span class="line">r &#x3D; redis.Redis(host&#x3D;host,port&#x3D;port)</span><br></pre></td></tr></table></figure><h2 id="五大类型操作"><a href="#五大类型操作" class="headerlink" title="五大类型操作"></a>五大类型操作</h2><p>字符串类型　String</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ex过期时间 单位秒S</span><br><span class="line">r.set(&#39;name&#39;, &#39;Jack&#39;, ex&#x3D;20)</span><br><span class="line">ret &#x3D; r.get(&#39;name&#39;)</span><br><span class="line"></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">过期前： b&#39;Jack&#39;</span><br><span class="line">过期后： None</span><br></pre></td></tr></table></figure><p>列表类型　list　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">r.lpush(&#39;object&#39;, &#39;one&#39;)</span><br><span class="line">r.lpush(&#39;object&#39;, &#39;two&#39;)</span><br><span class="line">r.lpush(&#39;object&#39;, &#39;three&#39;)</span><br><span class="line">r.lpush(&#39;object&#39;, &#39;four&#39;)</span><br><span class="line">r.lpush(&#39;object&#39;, &#39;five&#39;)</span><br><span class="line">r.lpush(&#39;object&#39;, &#39;six&#39;)</span><br><span class="line">ret &#x3D; r.lrange(&#39;object&#39;, 0, 5)</span><br><span class="line"></span><br><span class="line">print(ret[::-1], len(ret))</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">[b&#39;one&#39;, b&#39;two&#39;, b&#39;three&#39;, b&#39;four&#39;, b&#39;five&#39;, b&#39;six&#39;] 6</span><br></pre></td></tr></table></figure><p>哈希类型 hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">r.hset(&#39;userinfo&#39;, &#39;name&#39;, &#39;Jack&#39;)</span><br><span class="line">r.hset(&#39;userinfo&#39;, &#39;age&#39;, 20)</span><br><span class="line">r.hset(&#39;userinfo&#39;, &#39;phone&#39;, &#39;110110110110&#39;)</span><br><span class="line">r.hset(&#39;userinfo&#39;, &#39;email&#39;, &#39;123@gmail.com&#39;)</span><br><span class="line">ret &#x3D; r.hgetall(&#39;userinfo&#39;)</span><br><span class="line"></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">&#123;b&#39;name&#39;: b&#39;Jack&#39;, b&#39;age&#39;: b&#39;20&#39;, b&#39;phone&#39;: b&#39;110110110110&#39;, b&#39;email&#39;: b&#39;123@gmail.com&#39;&#125;</span><br></pre></td></tr></table></figure><p>有序集合类型　sorted set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">r.zadd(&quot;ret1&quot;, n1&#x3D;11, n2&#x3D;22)</span><br><span class="line">r.zadd(&quot;ret2&quot;, &#39;m1&#39;, 22, &#39;m2&#39;, 44)</span><br><span class="line"></span><br><span class="line">print(r.zcard(&quot;ret1&quot;))</span><br><span class="line">print(r.zcard(&quot;ret2&quot;))</span><br><span class="line">print(r.zrange(&quot;ret1&quot;, 0, -1))</span><br><span class="line">print(r.zrange(&quot;ret2&quot;, 0, -1, withscores&#x3D;True))</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">[b&#39;n1&#39;, b&#39;n2&#39;]</span><br><span class="line">[(b&#39;m1&#39;, 22.0), (b&#39;m2&#39;, 44.0)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>国际化切换</title>
      <link href="/2020/05/08/%E5%9B%BD%E9%99%85%E5%8C%96%E5%88%87%E6%8D%A2/"/>
      <url>/2020/05/08/%E5%9B%BD%E9%99%85%E5%8C%96%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>为了满足不同地区的需求，我们的前端部分需要做，多语言的支持</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure><h2 id="在main-js文件中引入："><a href="#在main-js文件中引入：" class="headerlink" title="在main.js文件中引入："></a>在main.js文件中引入：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">i&#x2F;&#x2F;导入</span><br><span class="line">import VueI18n from &#39;vue-i18n&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;注册</span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导入语言包</span><br><span class="line">const i18n &#x3D; new VueI18n(&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当前默认语言</span><br><span class="line">locale:&#39;zh&#39;,</span><br><span class="line">&#x2F;&#x2F;语言包声明</span><br><span class="line">messages:&#123;</span><br><span class="line"></span><br><span class="line">&#39;zh&#39;:require(&#39;.&#x2F;lang&#x2F;zh&#39;),</span><br><span class="line">&#39;en&#39;:require(&#39;.&#x2F;lang&#x2F;en&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  i18n,  &#x2F;&#x2F; 不要忘记</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="中英文随意切换"><a href="#中英文随意切换" class="headerlink" title="中英文随意切换"></a>中英文随意切换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开关标签 --&gt;</span><br><span class="line">&lt;h-switch @change&#x3D;&quot;lang_change&quot; v-model&#x3D;&quot;lang&quot; &gt;中&#x2F;英&lt;&#x2F;h-switch&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">&#x2F;&#x2F;定义数据</span><br><span class="line">data()&#123;</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">msg:&#39;&lt;h1&gt;这是一个变量&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">&#x2F;&#x2F;开关变量</span><br><span class="line">lang:1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;钩子方法  created</span><br><span class="line">mounted:function()&#123;</span><br><span class="line"></span><br><span class="line">var lang_locale &#x3D; localStorage.getItem(&quot;lang&quot;);</span><br><span class="line"></span><br><span class="line">if(lang_locale)&#123;</span><br><span class="line"></span><br><span class="line">this.$i18n.locale &#x3D; lang_locale;</span><br><span class="line"></span><br><span class="line">if(lang_locale &#x3D;&#x3D; &#39;zh&#39;)&#123;</span><br><span class="line"></span><br><span class="line">this.lang &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">this.lang &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">this.$i18n.locale &#x3D; &#39;zh&#39;;</span><br><span class="line">this.lang &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;自定义方法</span><br><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;切换语言</span><br><span class="line">lang_change:function()&#123;</span><br><span class="line"></span><br><span class="line">console.log(this.lang);</span><br><span class="line"></span><br><span class="line">if(this.lang &#x3D;&#x3D; true)&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;中文</span><br><span class="line">this.$i18n.locale &#x3D; &quot;zh&quot;;</span><br><span class="line">localStorage.setItem(&quot;lang&quot;,&#39;zh&#39;);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;英文</span><br><span class="line">this.$i18n.locale &#x3D; &quot;en&quot;;</span><br><span class="line">localStorage.setItem(&quot;lang&quot;,&#39;en&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jwt的使用</title>
      <link href="/2020/05/07/jwt%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/07/jwt%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="jwt的安装"><a href="#jwt的安装" class="headerlink" title="jwt的安装"></a>jwt的安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>JWT 特点 体积小，因而传输速度快</p><p>传输方式多样，可以通过URL/POST参数/HTTP头部等方式传输</p><p>严格的结构化。它自身（在 payload 中）就包含了所有与用户相关的验证消息，如用户可访问路由、访问有效期等信息，服务器无需再去连接数据库验证信息的有效性，并且 payload 支持为你的应用而定制化。</p><p>支持跨域验证，可以应用于单点登录。</p><p>JWT是Auth0提出的通过对JSON进行加密签名来实现授权验证的方案，编码之后的JWT看起来是这样的一串字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>由 . 分为三段，通过解码可以得到：</p><p>1.头部（Header）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 包括类别（typ）、加密算法（alg）；</span><br><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jwt的头部包含两部分信息：</p><p>声明类型，这里是jwt</p><p>声明加密的算法 通常直接使用 HMAC SHA256</p><p>1.载荷（payload）</p><p>载荷（payload） 载荷就是存放有效信息的地方。</p><p>2.签名（signature)</p><p>签名的目的：签名实际上是对头部以及载荷内容进行签名。所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。 这样就能保证token不会被篡改。</p><p>最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）。类似盐</p><p>这里在第三步我们得到 JWT 之后，需要将JWT存放在 client，之后的每次需要认证的请求都要把JWT发送过来。（请求时可以放到 header 的 Authorization ）</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>我们可以使用jwt做用户认证，防止篡改token</p><p>用户登陆成功后，生成一个token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 生成用户token</span><br><span class="line">encode_jwt &#x3D; jwt.encode(&#123;&#39;uid&#39;: user.id&#125;, &#39;qwe123&#39;, algorithm&#x3D;&#39;HS256&#39;)</span><br><span class="line">encode_str &#x3D; str(encode_jwt, &#39;utf-8&#39;)</span><br></pre></td></tr></table></figure><p>将这个token交给前端，以后前端访问任意接口都将在header里带着这个令牌(token)，用来做认证，然后我们肯定不能每一个视图方法都做验证，所以可以利用装饰器做一个统一用户认证模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义权限检测装饰器</span><br><span class="line">def my_decorator(func):</span><br><span class="line">    def wrapper(request, *args, **kwargs):</span><br><span class="line">        # 接收参数</span><br><span class="line">        uid &#x3D; request.GET.get(&quot;uid&quot;, None)</span><br><span class="line"></span><br><span class="line">        myjwt &#x3D; request.GET.get(&quot;jwt&quot;, None)</span><br><span class="line"></span><br><span class="line">        print(myjwt)</span><br><span class="line"></span><br><span class="line">        # 验证用户合法性</span><br><span class="line">        decode_jwt &#x3D; jwt.decode(myjwt, &#39;qwe123&#39;, algorithms&#x3D;[&#39;HS256&#39;])</span><br><span class="line"></span><br><span class="line">        # 进行比对</span><br><span class="line">        if int(uid) !&#x3D; int(decode_jwt[&#39;uid&#39;]):</span><br><span class="line">            return Response(&#123;&#39;code&#39;: 401, &#39;message&#39;: &#39;您的密钥无权限&#39;&#125;)</span><br><span class="line"></span><br><span class="line">        return func(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure><p>一个简单的jwt就写好了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安慰剂进度条</title>
      <link href="/2020/05/07/%E5%AE%89%E6%85%B0%E5%89%82%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
      <url>/2020/05/07/%E5%AE%89%E6%85%B0%E5%89%82%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>安慰剂型进度条：估计一个大概时间，这件事大概1分钟干完，那么每秒加1.16%，最后99%或者100%的时候还没干完？那就一直显示99或者100，直到完成。也有情况是做到一半比如60%的时候实际已经完了，那么突然变成100%然后告诉你，完成了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line"> &lt;div&gt;</span><br><span class="line"> &lt;td style&#x3D;&quot;padding:5px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;upload_qiniu&quot;&#x2F;&gt;</span><br><span class="line">&#123;&#123; load_percent &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;br &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 进度条标签 --&gt;</span><br><span class="line">&lt;Progress v-show&#x3D;&quot;load_int&quot; :percent&#x3D;&quot;load_int&quot; color&#x3D;&quot;green&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;span slot&#x3D;&quot;text&quot;&gt;&#123;&#123; load_int &#125;&#125;%&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;Progress&gt;</span><br><span class="line"></span><br><span class="line">     &lt;&#x2F;td&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &quot;这是一个变量&quot;,,</span><br><span class="line">        &#x2F;&#x2F;整型进度</span><br><span class="line">        load_int: 0,</span><br><span class="line">        &#x2F;&#x2F;上传进度展示</span><br><span class="line">        load_percent: &#39;&#39;,</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line">   upload_qiniu(e) &#123;</span><br><span class="line">        &#x2F;&#x2F;获取文件对象</span><br><span class="line">        let file &#x3D; e.target.files[0];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;声明参数</span><br><span class="line">        let param &#x3D; new FormData();</span><br><span class="line">        &#x2F;&#x2F;将上传贫证添加参数</span><br><span class="line">        param.append(&#39;token&#39;, this.token);</span><br><span class="line">        &#x2F;&#x2F;附加文件</span><br><span class="line">        param.append(&#39;file&#39;, file, file.name);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;定制化axios</span><br><span class="line">        const axios_qiniu &#x3D; this.axios.create(&#123;withCredentials: false&#125;);</span><br><span class="line">        axios_qiniu(&#123;</span><br><span class="line">          method: &#39;POST&#39;,</span><br><span class="line">          url: &#39;http:&#x2F;&#x2F;up-z1.qiniu.com&#x2F;&#39;,</span><br><span class="line">          data: param,</span><br><span class="line">          timeout: 30000,</span><br><span class="line">          onUploadProgress: (e) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;计算上传百分比</span><br><span class="line">            var complete &#x3D; (e.loaded &#x2F; e.total);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;处理美化</span><br><span class="line">            if (complete &lt; 1) &#123;</span><br><span class="line">              this.load_percent &#x3D; (complete * 100).toFixed(2) + &#39;%&#39;;</span><br><span class="line"></span><br><span class="line">              this.load_int &#x3D; parseInt((complete * 100).toFixed(2));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then(result &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F;手动赋值100%</span><br><span class="line">          this.load_percent &#x3D; &#39;100%&#39;;</span><br><span class="line">          this.load_int &#x3D; 100;</span><br><span class="line">          console.log(result)</span><br><span class="line">          this.src &#x3D; &#39;http:&#x2F;&#x2F;q9ksn08bu.bkt.clouddn.com&#x2F;&#39; + result.data.key</span><br><span class="line">          this.videosrc &#x3D; &#39;http:&#x2F;&#x2F;q9ksn08bu.bkt.clouddn.com&#x2F;&#39; + result.data.key</span><br><span class="line">          &#x2F;&#x2F;发送请求</span><br><span class="line">          this.axios.get(&#39;http:&#x2F;&#x2F;localhost:8000&#x2F;updateuser&#x2F;&#39;, &#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">              uid: localStorage.getItem(&quot;uid&quot;),</span><br><span class="line">              img: result.data.key</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;).then((result) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">            console.log(result);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>又拍云上传文件</title>
      <link href="/2020/05/06/%E5%8F%88%E6%8B%8D%E4%BA%91%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/05/06/%E5%8F%88%E6%8B%8D%E4%BA%91%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><p>安装第三方依赖库 requests: HTTP for Humans!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h2 id="安装-UPYUN-SDK"><a href="#安装-UPYUN-SDK" class="headerlink" title="安装 UPYUN SDK"></a>安装 UPYUN SDK</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install upyun</span><br></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>首先注册又拍云 <a href="http://www.upyun.com" target="_blank" rel="noopener">www.upyun.com</a></p><p>其后在云存储服务中点选，新建一个云空间服务</p><p><img src="/" class="lazyload" data-src="/images/youpai/1.jpg"  alt="1"></p><p>记录一下服务名称，如果手里有备案域名的话，可以分一个二级域名出来绑定一下加速域名</p><p>随后点击配置-》存储管理，新建一个操作员，这里新建的时候会分配给你一个用户名和密码，其中密码只能系统生成，这里一定要保存好</p><p><img src="/" class="lazyload" data-src="/images/youpai/2.png"  alt="2"></p><h2 id="代码实现拖拽上传文件"><a href="#代码实现拖拽上传文件" class="headerlink" title="代码实现拖拽上传文件"></a>代码实现拖拽上传文件</h2><p>ok，现在又拍云的云存储服务已经配置好。</p><p>我们现在新建一个upload.vue用来配置上传页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; @change&#x3D;&quot;upload_upyun&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;upload&quot;&gt;</span><br><span class="line">拖拽上传</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line"></span><br><span class="line">return&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;监听属性</span><br><span class="line">watch:&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;计算属性</span><br><span class="line">computed:&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">let upload &#x3D; document.querySelector(&#39;.upload&#39;);</span><br><span class="line">    upload.addEventListener(&#39;dragenter&#39;, this.onDrag, false);</span><br><span class="line">    upload.addEventListener(&#39;dragover&#39;, this.onDrag, false);</span><br><span class="line">    upload.addEventListener(&#39;drop&#39;, this.onDrop, false);</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;自定义方法</span><br><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">onDrag (e) &#123;</span><br><span class="line">      e.stopPropagation();</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;,</span><br><span class="line">    onDrop (e) &#123;</span><br><span class="line">      e.stopPropagation();</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      this.upload_upyun(e.dataTransfer.files);</span><br><span class="line">    &#125;,</span><br><span class="line">&#x2F;&#x2F;上传又拍云</span><br><span class="line">upload_upyun:function(files)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取文件对象</span><br><span class="line">&#x2F;&#x2F;let file &#x3D; e.target.files[0];</span><br><span class="line">let file &#x3D; files[0];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明参数</span><br><span class="line">let param &#x3D; new FormData();</span><br><span class="line">param.append(&#39;file&#39;,file);</span><br><span class="line"></span><br><span class="line">const config &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">headers: &#123; &#39;Content-Type&#39;: &#39;multipart&#x2F;form-data&#39; &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> this.axios.post(&#39;http:&#x2F;&#x2F;localhost:8000&#x2F;upyun&#x2F;&#39;,param,config).then((result) &#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">      console.log(result);</span><br><span class="line"></span><br><span class="line">      this.src &#x3D; &#39;http:&#x2F;&#x2F;smtest123.test.upcdn.net&#x2F;&#39;+result.data.filename</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  .upload &#123;</span><br><span class="line">  margin: 100px auto;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 150px;</span><br><span class="line">  border: 2px dashed #f00;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>值得一提的是，vue页面我们使用拖拽上传的方式。</p><p>前端页面搞定了，此时我们利用Django做一个上传接口，理论上可以绕过服务端进行上传，但是考虑到安全性，比如签名容易泄露，所以我们采用曲线救国的方式，后台接口虽然中转一下文件，但是并不对文件进行存储，使用chunks的方式分块读取立刻上传又拍云</p><p>建立一个视图文件views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import upyun</span><br><span class="line"></span><br><span class="line">#定义文件上传类</span><br><span class="line">class UploadFile(View):</span><br><span class="line">    </span><br><span class="line">    def post(self,request):</span><br><span class="line"></span><br><span class="line">        img &#x3D; request.FILES.get(&#39;file&#39;)</span><br><span class="line"></span><br><span class="line">        up &#x3D; upyun.UpYun(&#39;你的空间名称&#39;, username&#x3D;&#39;操作员账号&#39;, password&#x3D;&#39;操作员密码&#39;)</span><br><span class="line"></span><br><span class="line">        headers &#x3D; &#123; &#39;x-gmkerl-rotate&#39;: &#39;180&#39; &#125;</span><br><span class="line">        </span><br><span class="line">        for chunk in img.chunks():</span><br><span class="line">            res &#x3D; up.put(&#39;&#x2F;touxiang1.jpg&#39;, chunk, checksum&#x3D;True, headers&#x3D;headers)</span><br><span class="line"></span><br><span class="line">        #返回结果</span><br><span class="line">       return Response(&#123;&#39;filename&#39;: file.name&#125;)</span><br></pre></td></tr></table></figure><h2 id="测试一下："><a href="#测试一下：" class="headerlink" title="测试一下："></a>测试一下：</h2><p><img src="/" class="lazyload" data-src="/images/youpai/4.png"  alt="2"></p><p>可以看到成功上传，那么如何访问呢，可以通过分配的域名或者自己绑定的域名直接拼接文件地址即可以访问</p><p><img src="/" class="lazyload" data-src="/images/youpai/3.png"  alt="2"></p><p>访问地址：<a href="http://smtest123.test.upcdn.net/你的图片.jpg" target="_blank" rel="noopener">http://smtest123.test.upcdn.net/你的图片.jpg</a></p><p>这样一个简单的又拍云文件拖拽上传就完成了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2020/05/04/%E7%AE%80%E5%8E%86/"/>
      <url>/2020/05/04/%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>姓名：石名</p><p>出生日期：1995年2月</p><p>手机：159-3559-0298</p><p>个人网站: <a href="https://shiming.tech/" target="_blank" rel="noopener">https://shiming.tech/</a></p><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p>项目描述：</p><p>在线教育平台是国内领先的IT在线编程及在线实训学习平台,专业导师提供精选的实践项目,创新的技术使得学习者无需配置繁琐的本地环境,随时在线流畅使用。在线教育是一家专注于IT技术的在线实训平台，采用创新的“在线实验”学习模式，为学生及在职程序员提供编程、运维、测试、云计算、大数据、数据库等当前主流IT技术实践课程。在线教育建设初衷是帮助学习者通过动手实践收获知识，同时体会实验精神。德国教育学家斯普朗格说：“教育的最终目的不是传授已有的东西，而是要把人的创造力量诱导出来”，在线教育设计理念也是如此：从实践切入，依靠交互性、操作性更强的课程，理论学习+动手实践共同激发你的创造力。</p><p>负责功能：</p><p>   django + restframework seraliazer接口开发，</p><p>   前后端分离，使用序列化实现前端页面展示、</p><p>   七牛云实现储存图片，</p><p>   WT验证用户是否篡改用户id、</p><p>   可以使用redis来储存商品标签、判断用户是否多次访问同一个页面、排行榜接口等等</p><p>   搜索商品、用户正常登录以及微博钉钉三方登陆、</p><p>   使用JWT来验证用户是否而已篡改信息</p><h2 id="掌握技能"><a href="#掌握技能" class="headerlink" title="掌握技能"></a>掌握技能</h2><p>1.掌握mysql,Redis,MongoDB数据库</p><p>2.熟悉vue框架</p><p>3.熟练掌握django框架</p><p>4.其他： VS code, PyCharm</p><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><p>2018年7月 - 至今 北京微点网络科技有限公司—中级全栈开发工程师</p><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>我开朗幽默却不失沉着稳重,生活中具有热情、外向等特点，喜欢与人交往，乐于帮助他人。以积极的心态进行人际交往和合作，关心他人，善于捕捉人的思想变化以及其它方面的细节，能够体会并理解他人</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微博第三方登陆</title>
      <link href="/2020/04/28/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/"/>
      <url>/2020/04/28/%E5%BE%AE%E5%8D%9A%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="新浪微博三方登陆流程图"><a href="#新浪微博三方登陆流程图" class="headerlink" title="新浪微博三方登陆流程图"></a>新浪微博三方登陆流程图</h2><p><img src="/" class="lazyload" data-src="/images/weibo/nb.png"  alt="0"></p><h2 id="申请成为新浪微博开发者流程"><a href="#申请成为新浪微博开发者流程" class="headerlink" title="申请成为新浪微博开发者流程"></a>申请成为新浪微博开发者流程</h2><p><img src="/" class="lazyload" data-src="/images/weibo/weibo1.png"  alt="1"></p><p><img src="/" class="lazyload" data-src="/images/weibo/weibo2.png"  alt="2"></p><p><img src="/" class="lazyload" data-src="/images/weibo/weibo3.png"  alt="3"></p><p><img src="/" class="lazyload" data-src="/images/weibo/weibo4.png"  alt="4"></p><h2 id="新建应用"><a href="#新建应用" class="headerlink" title="新建应用"></a>新建应用</h2><p><img src="/" class="lazyload" data-src="/images/weibo/weibo7.png"  alt="5"></p><h2 id="获取appid和app秘钥"><a href="#获取appid和app秘钥" class="headerlink" title="获取appid和app秘钥"></a>获取appid和app秘钥</h2><p>点击应用信息基本信息</p><p><img src="/" class="lazyload" data-src="/images/weibo/weibo8.png"  alt="6"></p><h2 id="新浪微博拼接登录代码"><a href="#新浪微博拼接登录代码" class="headerlink" title="新浪微博拼接登录代码"></a>新浪微博拼接登录代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#新浪微博登录地址组合返回（第一步）</span><br><span class="line">class SinaFirstHandler(BaseHandler):</span><br><span class="line"></span><br><span class="line">    def get(self,*args,**kwargs):</span><br><span class="line"></span><br><span class="line">        #微博接口地址</span><br><span class="line">        weibo_auth_url &#x3D; &quot;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;authorize&quot;</span><br><span class="line">        #回调网址</span><br><span class="line">        redirect_url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;md_admin&#x2F;weibo&quot;</span><br><span class="line">        #应用id</span><br><span class="line">        client_id &#x3D; &quot;2636039333&quot;</span><br><span class="line">        #组合url</span><br><span class="line">        auth_url &#x3D; weibo_auth_url + &quot;?client_id&#x3D;&#123;client_id&#125;&amp;redirect_uri&#x3D;&#123;re_url&#125;&quot;.format(client_id&#x3D;client_id,</span><br><span class="line">                                                                                        re_url&#x3D;redirect_url)</span><br><span class="line">        self.write(auth_url)</span><br></pre></td></tr></table></figure><h2 id="新浪微博特定代码"><a href="#新浪微博特定代码" class="headerlink" title="新浪微博特定代码"></a>新浪微博特定代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#新浪微博回调地址（第二步）</span><br><span class="line">class SinaBackHandler(BaseHandler):</span><br><span class="line"></span><br><span class="line">    def get(self,*args,**kwargs):</span><br><span class="line">        #获取回调的code</span><br><span class="line">        code &#x3D; self.get_argument(&#39;code&#39;)</span><br><span class="line">        #微博认证地址</span><br><span class="line">        access_token_url &#x3D; &quot;https:&#x2F;&#x2F;api.weibo.com&#x2F;oauth2&#x2F;access_token&quot;</span><br><span class="line">        #参数 向新浪接口发送请求</span><br><span class="line">        re_dict &#x3D; requests.post(access_token_url,data&#x3D;&#123;</span><br><span class="line">            &quot;client_id&quot;: &#39;2636039333&#39;,</span><br><span class="line">            &quot;client_secret&quot;: &quot;4e2fbdb39432c31dc5c2f90be3afa5ce&quot;,</span><br><span class="line">            &quot;grant_type&quot;: &quot;authorization_code&quot;,</span><br><span class="line">            &quot;code&quot;: code,</span><br><span class="line">            &quot;redirect_uri&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;md_admin&#x2F;weibo&quot;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        re_dict &#x3D; re_dict.text</span><br><span class="line">        re_dict &#x3D; eval(re_dict)</span><br><span class="line">        print(re_dict.get(&#39;uid&#39;))</span><br><span class="line"></span><br><span class="line">        self.write(re_dict)</span><br></pre></td></tr></table></figure><h2 id="换取新浪微博昵称"><a href="#换取新浪微博昵称" class="headerlink" title="换取新浪微博昵称"></a>换取新浪微博昵称</h2><p>点击应用信息测试信息，添加测试账号</p><p><img src="/" class="lazyload" data-src="/images/weibo/weibo9.png"  alt="9"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 换取新浪微博昵称</span><br><span class="line">res &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.weibo.com&#x2F;2&#x2F;users&#x2F;show.json&#39;, params&#x3D;&#123;&#39;access_token&#39;:</span><br><span class="line">                                                                          re.json()[&#39;access_token&#39;],</span><br><span class="line">                                                                      &#39;uid&#39;: re.json()[&#39;uid&#39;]&#125;)</span><br><span class="line">result &#x3D; json.loads(res.text)</span><br><span class="line">user &#x3D; User.objects.filter(username&#x3D;str(result[&#39;name&#39;])).first()</span><br><span class="line">sina_id &#x3D; &#39;&#39;</span><br><span class="line">user_id &#x3D; &#39;&#39;</span><br><span class="line">if user:</span><br><span class="line">    sina_id &#x3D; user.username</span><br><span class="line">    user_id &#x3D; user.id</span><br><span class="line">else:</span><br><span class="line">    user &#x3D; User(username&#x3D;str(result[&#39;name&#39;]), password&#x3D;&#39;&#39;)</span><br><span class="line">    user.save()</span><br><span class="line">    sina_id &#x3D; result[&#39;name&#39;]</span><br><span class="line"></span><br><span class="line">    user &#x3D; User.objects.filter(username&#x3D;str(result[&#39;name&#39;])).first()</span><br><span class="line">    user_id &#x3D; user.id</span><br><span class="line"></span><br><span class="line">return redirect(&quot;http:&#x2F;&#x2F;localhost:8080?sina_id&#x3D;&quot; + sina_id + &quot;&amp;uid&#x3D;&quot; + str(user_id))</span><br></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>访问拆分地址获取登录地址-》在附加网址内部判断新浪微博是否登录成功</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker基本操作</title>
      <link href="/2020/04/27/12/"/>
      <url>/2020/04/27/12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker是一个开源的容器项目，基于go语言开发。之所以被称为容器技术，是因为docker对进程进行封装，隔离于宿主系统和其它的进程，类似于一个装东西的容器，而且在容器里面装有一系列文件系统、网络、依赖包等应用程序运行需要的环境，开发人员可以快速将他们的应用程序部署到容器内运行。容器技术属于操作系统层面的虚拟化技术，它和虚拟机技术主要的区别如下</p><p>虚拟机需要先在宿主机操作系统上安装虚拟机管理软件Hypervisor，然后在每台虚拟机内用户安装需要的操作系统和依赖文件，并且需要预分配一定的硬件资源。虚拟机一旦开启，无论应用程序需要的资源量大小，预分配的资源将被全部占用，造成很大的资源浪费，而且每次启动虚拟机，都需要启动一次虚拟机内的操作系统，很耗时。</p><p>容器相当于直接在宿主机操作系统的基础上开启一个进程，各个容器共享宿主机的硬件资源和操作系统，可以实现资源的动态分配，并且启动容器就是启动一个进程，速度很快，应用程序直接在各个容器内运行，互不影响。资源和时间都开销很低。</p><h2 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h2><p>容器技术的核心概念有容器(container)、镜像(image)、仓库(registry)三个。</p><p>容器：具体的运行应用程序的一个进程，它里面包含应用程序的各种依赖。</p><p>镜像：创建容器的模板，根据不同配置的镜像来创建不同的容器使用。镜像和容器的关系可以理解为面向对象中类和实例对象的关系。</p><p>仓库：一个镜像只可以创建一种类型的容器，镜像多了就需要放到镜像仓库中存起来，仓库有本地镜像仓库和公共镜像仓库，平时使用本地仓库的镜像，没有的话去Registry hub公共镜像仓库下载。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Docker build 创建镜像</p><p>Docker run  利用镜像运行容器</p><p>Docker image 关于镜像的一系列操作</p><p>Docker pull  从镜像仓库下载镜像到本地仓库</p><p>Docker push  上传镜像到镜像仓库</p><p>Docker container 执行关于容器的一系列操作</p><p>Docker stats 实时监控该节点容器的资源使用情况</p><p>查看镜像</p><p>docker images</p><p>下载镜像</p><p>docker pull (  )</p><p>导出redis镜像</p><p>docker save -o ‘c:/redis/redis.tar’ redis<br> 删除镜像</p><p>docker rmi -f (image id)</p><p>导入镜像</p><p>docker load -i ‘c:/redis/redis.tar’</p><p> 查看正在运行的容器</p><p>docker ps</p><p> 启动redis服务 </p><p>docker run -p 6380(宿主机端口):6379(默认端口) redis redis-server</p><p>启动redis</p><p>redis-cli -h 192.168.99.100 -p 6380</p><p>停止容器</p><p>docker stop (container id)</p><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><p>1 docker commit [containerID] [ImageName]:[Version] 将修改后的容器重新打包成镜像</p><p>2 docker commit -a “runoob.com” -m “my apache” a404c6c174a2 mymysql:v1 将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p><p>-a :提交的镜像作者；</p><p> -c :使用Dockerfile指令来创建镜像；</p><p> -m :提交时的说明文字；</p><p> -p :在commit时，将容器暂停。</p><p>3 docker push [ImageID] [repertory_address]提交镜像到云仓库</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度智能api识图</title>
      <link href="/2020/04/26/13/"/>
      <url>/2020/04/26/13/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>首先申请百度api开发平台： <a href="https://cloud.baidu.com/" target="_blank" rel="noopener">https://cloud.baidu.com/</a></strong></p><p><strong>然后在人工智能-&gt;文字识别 模块里建立一个应用</strong></p><p><img src="/" class="lazyload" data-src="/images/1.png"  alt="1"></p><p><strong>建立成功后，会分配给你一个key和secret</strong></p><p><strong>这里,我们使用文字识别高精度版</strong></p><p><strong>然后我们点击右上方的(帮助文档)中的(产品文档)</strong></p><p><img src="/" class="lazyload" data-src="/images/2.png"  alt="2"></p><p><strong>点击人工智能中的文字识别</strong></p><p><img src="/" class="lazyload" data-src="/images/3.png"  alt="3"></p><p><strong>点击通用文字识别(高精度版)</strong></p><p><img src="/" class="lazyload" data-src="/images/4.png"  alt="4"></p><p><strong>第一步，获取access_token</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 获取token</span><br><span class="line"></span><br><span class="line">res &#x3D; requests.get(&#39;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;oauth&#x2F;2.0&#x2F;token?grant_type&#x3D;client_credentials&amp;client_id&#x3D;你的key&amp;client_secret&#x3D;你的钥匙&amp;&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">token &#x3D; res.json()[&#39;access_token&#39;]</span><br></pre></td></tr></table></figure><p><strong>然后请求高精度识别接口，需要注意一点，这里图片需要转换成 base64编码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 开启智能识图</span><br><span class="line"></span><br><span class="line"># 接口地址</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;aip.baidubce.com&#x2F;rest&#x2F;2.0&#x2F;ocr&#x2F;v1&#x2F;accurate_basic?access_token&#x3D;&#39;+token</span><br><span class="line"></span><br><span class="line"># 定义头部</span><br><span class="line"></span><br><span class="line">myheaders &#x3D; &#123;&#39;Content-Type&#39;:&#39;application&#x2F;x-www-form-urlencoded&#39;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 操作图片</span><br><span class="line"># 读取图片</span><br><span class="line">myimg &#x3D; open(&#39;.&#x2F;code.png&#39;,&#39;rb&#39;)</span><br><span class="line"></span><br><span class="line">temp_img &#x3D; myimg.read()</span><br><span class="line"></span><br><span class="line">myimg.close()</span><br><span class="line"></span><br><span class="line"># 进行base64编码</span><br><span class="line">temp_data &#x3D; &#123;&#39;image&#39;:base64.b64encode(temp_img)&#125;</span><br><span class="line"></span><br><span class="line"># 对图片地址进行urlencode操作</span><br><span class="line">temp_data &#x3D; urllib.parse.urlencode(temp_data)</span><br><span class="line"></span><br><span class="line"># 请求识图接口</span><br><span class="line">res &#x3D; requests.post(url&#x3D;url,data&#x3D;temp_data,headers&#x3D;myheaders)</span><br><span class="line"></span><br><span class="line">print(res.json()[&#39;words_result&#39;][0][&#39;words&#39;])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用django自己建立一个验证码</title>
      <link href="/2020/04/26/1/"/>
      <url>/2020/04/26/1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>如何用django自己建立一个验证码</strong></p><p>1.导入相应的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 导入加密库</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"># 导入图片库</span><br><span class="line">#会图画</span><br><span class="line">from PIL import ImageDraw</span><br><span class="line"># 字体库</span><br><span class="line">from PIL import ImageFont</span><br><span class="line"></span><br><span class="line"># 图片库</span><br><span class="line">from PIL import Image</span><br><span class="line"># 随机库</span><br><span class="line">import random</span><br></pre></td></tr></table></figure><p>代码如下：<br>wiews视图中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 验证码</span><br><span class="line"></span><br><span class="line"># 定义验证码</span><br><span class="line">class MyCode(View):</span><br><span class="line">    # 定义随机取色方法</span><br><span class="line">    def get_randm_color(self):</span><br><span class="line">        R &#x3D; random.randrange(255)</span><br><span class="line">        G &#x3D; random.randrange(255)</span><br><span class="line">        B &#x3D; random.randrange(255)</span><br><span class="line">        return (R, G, B)</span><br><span class="line"></span><br><span class="line">    def get(self,request):</span><br><span class="line">        #定义画布</span><br><span class="line">        img_site&#x3D;(120,50)</span><br><span class="line">        #定义图像,颜色种类，画布，背景颜色</span><br><span class="line">        image&#x3D;Image.new(&#39;RGB&#39;,img_site,&#39;white&#39;)</span><br><span class="line">        #定义画笔</span><br><span class="line">        draw&#x3D;ImageDraw.Draw(image,&#39;RGB&#39;)</span><br><span class="line">        #随机字符串的组成</span><br><span class="line">        source&#x3D;&#39;0123456sm521fhz&#39;</span><br><span class="line">        #定义容器</span><br><span class="line">        code_str&#x3D;&#39;s&#39;</span><br><span class="line">        for i in range(4):</span><br><span class="line">            #取色</span><br><span class="line">            text_color&#x3D;self.get_randm_color()</span><br><span class="line">            #获取一个字符串</span><br><span class="line">            tmp_num&#x3D;random.randrange(len(source))</span><br><span class="line">            #获取字符集</span><br><span class="line">            random_str&#x3D;source[tmp_num]</span><br><span class="line">            #将随机生成的字符串放入定义好的容器</span><br><span class="line">            code_str +&#x3D; random_str</span><br><span class="line"></span><br><span class="line">            #将文字输入绘图</span><br><span class="line">            draw.text((10+30*i,20),random_str,text_color)</span><br><span class="line"></span><br><span class="line">        #建立io文件流</span><br><span class="line">        buf&#x3D;io.BytesIO()</span><br><span class="line">        #保存内存中</span><br><span class="line">        image.save(buf,&#39;png&#39;)</span><br><span class="line">        #将验证码放入session</span><br><span class="line">        request.session[&#39;code&#39;]&#x3D;code_str</span><br><span class="line">        print(request.session[&#39;code&#39;])</span><br><span class="line">        #返回文件流图像</span><br><span class="line">        return HttpResponse(buf.getvalue(),&#39;image&#x2F;png&#39;)</span><br></pre></td></tr></table></figure><p>Vue中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;Form</span><br><span class="line">        ref&#x3D;&quot;form&quot;</span><br><span class="line">        :showErrorTip&#x3D;&quot;showErrorTip&quot;</span><br><span class="line">        :rules&#x3D;&quot;rules&quot;</span><br><span class="line">        :model&#x3D;&quot;model&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;FormItem label&#x3D;&quot;验证码&quot; prop&#x3D;&quot;code&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;model.code&quot;&#x2F;&gt;&lt;img :src&#x3D;&quot;src&quot; @click&#x3D;&quot;chageImgcode&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;&#x2F;FormItem&gt;</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">    retun&#123;</span><br><span class="line">     src:&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;mycode&#x2F;&#39;,</span><br><span class="line">     model:&#123;</span><br><span class="line">     code:&#39;&#39;,</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        &#x2F;&#x2F;点击刷新验证码</span><br><span class="line">    chageImgcode()&#123;</span><br><span class="line">      &#x2F;&#x2F;生成随机字符串</span><br><span class="line">      let num&#x3D;Math.ceil(Math.random()*10);</span><br><span class="line">      this.src&#x3D;this.src+&#39;?code&#39;+num;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    submit()&#123;</span><br><span class="line">       let validResult &#x3D; this.$refs.form.valid();</span><br><span class="line">       </span><br><span class="line">        let code&#x3D;this.model.code</span><br><span class="line">        &#x2F;&#x2F; let image_code &#x3D; this.model.image_code;</span><br><span class="line">  if (validResult.result) &#123;</span><br><span class="line">        &#x2F;&#x2F;请求后台接口</span><br><span class="line">      &#x2F;&#x2F;定义一个传递变量</span><br><span class="line">      var _this&#x3D;this;</span><br><span class="line">      this.axios.get(&#39;http:&#x2F;&#x2F;localhost:8000&#x2F;register&#x2F;&#39;,&#123;</span><br><span class="line">        &#x2F;&#x2F;设置参数</span><br><span class="line">        params:&#123;</span><br><span class="line">          username:username,</span><br><span class="line">          password:password,</span><br><span class="line">          &#x2F;&#x2F; image_code:image_code,</span><br><span class="line">          code:code</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(function (result) &#123;</span><br><span class="line">      if (result.data.code&#x3D;&#x3D;200)&#123;</span><br><span class="line">          &#x2F;&#x2F;跳转</span><br><span class="line">          _this.$router.push(&#39;&#x2F;login&#39;);</span><br><span class="line">          console.log(result);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">           _this.$Message(result.data.message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><p>django后台判断前台验证码是否正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Register(APIView):</span><br><span class="line">    def get(self, request):</span><br><span class="line"></span><br><span class="line"> #获取随机验证码</span><br><span class="line">        code &#x3D; request.GET.get(&#39;code&#39;, &#39;未收到验证码&#39;)</span><br><span class="line">        mycode &#x3D; request.session.get(&#39;code&#39;, None)</span><br><span class="line">        print(mycode)</span><br><span class="line"></span><br><span class="line">        if code !&#x3D; mycode:</span><br><span class="line">            res&#x3D;&#123;&#125;</span><br><span class="line">            res[&#39;code&#39;]&#x3D;404</span><br><span class="line">            res[&#39;message&#39;]&#x3D;&#39;验证码输入错误&#39;</span><br><span class="line">            return Response(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django创表与md5加密</title>
      <link href="/2020/04/23/11/"/>
      <url>/2020/04/23/11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><strong>django中的基类</strong></li></ul><hr><h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3><p>通常，你想使用父模型类来持有一些字段，如创建时间、更新时间等，而不想在每个子模型中都敲一遍。这个父模型类永远不会单独使用，这就是抽象基类</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line">from django.utils import timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 基类</span><br><span class="line">class Base(models.Model):</span><br><span class="line">    # 创建事件</span><br><span class="line">    create_time &#x3D; models.DateTimeField(default&#x3D;timezone.now, null&#x3D;True,verbose_name&#x3D;&#39;创建时间&#39;)</span><br><span class="line">    update_time &#x3D; models.DateTimeField(auto_now&#x3D;True,null&#x3D;True, verbose_name&#x3D;&#39;更新时间&#39;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        # 说明是一个抽象模型类</span><br><span class="line">        abstract &#x3D; True</span><br></pre></td></tr></table></figure><p>编写完基类之后，在 Meta类中设置 abstract=True ，这个模型就不会被用来创建任何数据表。取而代之的是，当它被用来作为一个其他model的基类时，它的字段将被加入那些子类中。</p><p>如：下面的模型类设置了两个字段，但是继承于BsaeModel基类在产生数据表时会有额外两个字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class User(Base):</span><br><span class="line">    # 用户名</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    # 密码</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    # 图片</span><br><span class="line">    img &#x3D; models.CharField(max_length&#x3D;200, null&#x3D;True)</span><br><span class="line">    # 类别  0普通用户 1超级管理员</span><br><span class="line">    type &#x3D; models.IntegerField(default&#x3D;0, null&#x3D;True)</span><br><span class="line">    # 手机号</span><br><span class="line">    phone &#x3D; models.IntegerField()</span><br><span class="line"></span><br><span class="line">    # 个人主页</span><br><span class="line">    num &#x3D; models.IntegerField(default&#x3D;0, null&#x3D;True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table &#x3D; &#39;user&#39;</span><br></pre></td></tr></table></figure><p>创完表后对数据库进行迁移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#创建迁移文件</span><br><span class="line">python manage.py makemigrations</span><br><span class="line"></span><br><span class="line">#执行迁移脚本</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><hr><h3 id="Django中md5加密"><a href="#Django中md5加密" class="headerlink" title="Django中md5加密"></a>Django中md5加密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 导入加密库</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"># md5加密方法</span><br><span class="line">def make_password(mypass):</span><br><span class="line">    # 生成md5对象</span><br><span class="line">    md5 &#x3D; hashlib.md5()</span><br><span class="line">    # 转码操作</span><br><span class="line">    mypass_utf8 &#x3D; str(mypass).encode(encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">    # 加密操作</span><br><span class="line">    md5.update(mypass_utf8)</span><br><span class="line">    # 返回操作</span><br><span class="line">    return md5.hexdigest()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建Django项目</title>
      <link href="/2020/04/23/10/"/>
      <url>/2020/04/23/10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h2><h3 id="1、cd到要创建项目的目录下，创建django项目"><a href="#1、cd到要创建项目的目录下，创建django项目" class="headerlink" title="1、cd到要创建项目的目录下，创建django项目"></a>1、cd到要创建项目的目录下，创建django项目</h3><h3 id="2、使用命令，创建django项目-django-admin-startproject-项目名"><a href="#2、使用命令，创建django项目-django-admin-startproject-项目名" class="headerlink" title="2、使用命令，创建django项目 django-admin startproject 项目名"></a>2、使用命令，创建django项目 django-admin startproject 项目名</h3><p><strong>修改settings文件以下行：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [&quot;*&quot;]  # 允许的主机后面加 * 或者加对应的IP</span><br><span class="line">LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;  # 语言编码改为zh-hans</span><br><span class="line">TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39;  # 时区必变  Asia&#x2F;Shanghai</span><br><span class="line">USE_TZ &#x3D; False  # 改为False</span><br></pre></td></tr></table></figure><h3 id="3、创建app-cd进入项目目录，例如：cd-mysite"><a href="#3、创建app-cd进入项目目录，例如：cd-mysite" class="headerlink" title="3、创建app  cd进入项目目录，例如：cd mysite"></a>3、创建app  cd进入项目目录，例如：cd mysite</h3><p><strong>app创建完成以后，修改settings文件以下内容</strong></p><p><strong>修改urls内容（作为跳转使用，方便以后管理）</strong></p><p>​        在我们的项目中，不可能只有一个<code>app</code>，如果把所有的<code>app</code>的<code>views</code>中的视图都放在<code>urls.py</code>中进行映射，肯定会让代码显得非常乱。因此<code>django</code>给我们提供了一个方法，可以在<code>app</code>内部包含自己的<code>url</code>匹配规则，而在项目的<code>urls.py</code>中再统一包含这个<code>app</code>的<code>urls</code>。使用这个技术需要借助<code>include</code>函数。示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;)),  # 添加行备注，以便于区分</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE的基本语法</title>
      <link href="/2020/04/22/9/"/>
      <url>/2020/04/22/9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="VUE的基本语法"><a href="#VUE的基本语法" class="headerlink" title="VUE的基本语法"></a>VUE的基本语法</h2><ul><li><h4 id="v-if：v-if条件判断"><a href="#v-if：v-if条件判断" class="headerlink" title="v-if：v-if条件判断"></a>v-if：v-if条件判断</h4></li></ul><p>v-if可以实现条件渲染，Vue会根据表达式的值的真假条件来渲染元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#39;A&#39;&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-else-if&#x3D;&quot;type&#x3D;&#x3D;&#39;B&#39;&quot;&gt;B&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-else&gt;C&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    &#x2F;&#x2F;定义数据</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg:&#39;这是一个变量&#39;,</span><br><span class="line">            type:&#39;A&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="v-on：监听事件"><a href="#v-on：监听事件" class="headerlink" title="v-on：监听事件"></a>v-on：监听事件</h4></li></ul><p>v-on主要用来监听dom事件，以便执行一些代码块。表达式可以是一个方法名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;counter++&quot;&gt;点我就加一&lt;&#x2F;button&gt;</span><br><span class="line">      &#123;&#123;counter&#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            counter:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;监听属性</span><br><span class="line">    watch:&#123;</span><br><span class="line">        counter:function(nval,oval)&#123;</span><br><span class="line">            console.log(&#39;计数器由&#39;+oval+&#39;变换为新的&#39;+nval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="v-model：双向数据绑定"><a href="#v-model：双向数据绑定" class="headerlink" title="v-model：双向数据绑定"></a>v-model：双向数据绑定</h4></li></ul><p>这个指令用于在表单上创建双向数据绑定。</p><p>v-model会忽略所有表单元素的value、checked、selected特性的初始值。因为它选择Vue实例数据做为具体的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input v-model&#x3D;&quot;somebody&quot;&gt;</span><br><span class="line">    &lt;p&gt;hello &#123;&#123;somebody&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            somebody:&#39;小明&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这个例子中直接在浏览器input中输入别的名字，下面的p的内容会直接跟着变。这就是双向数据绑定</p><ul><li><h4 id="vue-计算属性"><a href="#vue-计算属性" class="headerlink" title="vue 计算属性"></a>vue 计算属性</h4></li></ul><p>计算属性是vue实例中的一个配置选项：computed<br>通常里面都是一个个计算相关的函数，返回最后计算出来的值。<br>即我们可以把这些计算的过程写到一个计算属性中去，然后让它动态的计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line"></span><br><span class="line">    reversedMessage: function()&#123;</span><br><span class="line"></span><br><span class="line">        return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="vue-监听属性（深度监听对象或数组的变化）"><a href="#vue-监听属性（深度监听对象或数组的变化）" class="headerlink" title="vue 监听属性（深度监听对象或数组的变化）"></a>vue 监听属性（深度监听对象或数组的变化）</h4></li></ul><p>监听属性：监听vue的一个变量，每当这个变量发生改变，都执行特定的操作<br>watch:{…} 与data平级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    arr:&#123;</span><br><span class="line">        handler(val)&#123;</span><br><span class="line">            console.log(&quot;深度监听数组或对象的变化&quot;)</span><br><span class="line">        &#125;，</span><br><span class="line"></span><br><span class="line">        deep: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/21/hello-world/"/>
      <url>/2020/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法小记</title>
      <link href="/2020/04/21/3/"/>
      <url>/2020/04/21/3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Markdown（百度百科：Markdown）是一种轻量级的标记语言，语法简洁明了，易学易写，非常适合于编写结构化文档。Markdown的语法和HTML很类似，都是“文本+标记”的形式，文本表示内容，标记表示结构和排版。和HTML不同的是，Markdown的语法要简单的多，只涵盖纯文本可以涵盖的范围，所用的标记也只对应HTML标记中有关文本内容的部分。但Markdown的语法是兼容HTML的，也就是说，可以直接在Markdown文档中插入任何HTML内容，插入的HTML内容将得到与在HTML文档中相同的呈现效果。Markdown文档的扩展名为.md，可以使用任意文本编辑器（如记事本）打开和编辑。但要看到Markdown文档的呈现效果，则需要使用MarkdownPad等Markdown解析器。当然，也有许多在线Markdown解析器可供使用。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示</p><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><strong>斜体</strong><br>要倾斜的文字左右分别用一个*号包起来</li></ul><ul><li><p><strong>斜体加粗</strong><br>要倾斜和加粗的文字左右分别用三个*号包起来</p></li><li><p><strong>删除线</strong><br>要加删除线的文字左右分别用两个~~号包起来</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h2 id="三、分割线"><a href="#三、分割线" class="headerlink" title="三、分割线"></a>三、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><p>###无序列表</p><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>###有序列表</p><p>语法：<br>数字加点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>注意：序号跟内容之间要有空格<br>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h2 id="五、表格"><a href="#五、表格" class="headerlink" title="五、表格"></a>五、表格</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django模型之ORM操作</title>
      <link href="/2020/04/21/5/"/>
      <url>/2020/04/21/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Django模型之ORM操作"><a href="#Django模型之ORM操作" class="headerlink" title="Django模型之ORM操作"></a>Django模型之ORM操作</h3><h4 id="ORM介绍"><a href="#ORM介绍" class="headerlink" title="ORM介绍"></a>ORM介绍</h4><ul><li><p><strong>什么是ORM</strong><br>ORM 全拼Object-Relation Mapping.</p><p>中文意为 对象-关系映射.</p><p>在MVC/MVT设计模式中的Model模块中都包括ORM</p></li><li><p><strong>ORM优势</strong></p><ul><li><p>只需要面向对象编程, 不需要面向数据库编写代码.</p><p>对数据库的操作都转化成对类属性和方法的操作.<br>不用编写各种数据库的sql语句.</p></li><li><p>实现了数据模型与数据库的解耦, 屏蔽了不同数据库操作上的差异.</p><p>不在关注用的是mysql、oracle…等.<br>通过简单的配置就可以轻松更换数据库, 而不需要修改代码.</p></li></ul></li><li><p><strong>ORM劣势</strong><br>相比较直接使用SQL语句操作数据库,有性能损失.<br>根据对象的操作转换成SQL语句,根据查询的结果转化成对象, 在映射过程中有性能损失.</p></li><li><p><strong>ORM和数据库关系：</strong><br>在Django中model是你数据的单一、明确的信息来源。它包含了你存储的数据的重要字段和行为。通常，一个模型（model）映射到一个数据库表.</p><p>基本情况：</p><p>每个模型都是一个Python类，它是django.db.models.Model的子类。</p><p>模型的每个属性都代表一个数据库字段。</p></li></ul><h4 id="ORM操作"><a href="#ORM操作" class="headerlink" title="ORM操作"></a>ORM操作</h4><p><strong>增加操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过python manage.py shell 进入到shell下</span></span><br><span class="line"><span class="comment"># 进入shell环境以后，首先导入模型</span></span><br><span class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> * <span class="comment"># 导入全部模型</span></span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone   <span class="comment"># 导入时间模块</span></span><br><span class="line"><span class="comment"># 创建方法一：</span></span><br><span class="line">q = Question(question_text=<span class="string">"什么地方的菜最有特色？"</span>, pub_date=timezone.now())</span><br><span class="line">q.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联创建，用问题关联创建选项</span></span><br><span class="line">q.choice_set.create(choice_text=<span class="string">"湖南"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建方法二：</span></span><br><span class="line">q = Question()          <span class="comment"># 创建实例对象</span></span><br><span class="line">q.question_text = <span class="string">"什么地方的菜最有特色？"</span></span><br><span class="line">q.pub_date = timeaone.now()</span><br><span class="line">q.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建方法三：</span></span><br><span class="line">Question.objects.create(question_text=<span class="string">"什么地方的菜最有特色？"</span>, </span><br><span class="line">                        pub_date=timezone.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量创建，可以提高性能，减少对数据库的访问写入次数</span></span><br><span class="line">bulk_create()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量添加，需要传入的参数是一个列表</span></span><br><span class="line">Question.objects.bulk_create(</span><br><span class="line">    [</span><br><span class="line">        Question(question_text=<span class="string">"什么地方的菜最有特色？"</span>, pub_date=timezone.now()),</span><br><span class="line">        Question(question_text=<span class="string">"什么地方的景色最美？"</span>, pub_date=timezone.now())，</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改方法1：</span></span><br><span class="line">Question.objects.update(question_text = <span class="string">"什么地方最好玩？"</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方法2：</span></span><br><span class="line">q = Question.objects.update(pk=<span class="number">1</span>) </span><br><span class="line">q.question = <span class="string">"什么地方最好玩？"</span></span><br><span class="line">q.save()</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除：(先查询到某个queryset对象，然后用删除命令)</span></span><br><span class="line">q = Question.objects.get(id=<span class="number">1</span>)</span><br><span class="line">q.delete()</span><br></pre></td></tr></table></figure><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p><strong>必会的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、 all():                 查询所有结果</span></span><br><span class="line">question_list = Question.objects.all()  <span class="comment"># 返回一个queryset集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、 filter(**kwargs):      它包含了与所给筛选条件相匹配的对象</span></span><br><span class="line">question_list = Question.objects.filter(pk=<span class="number">1</span>)  <span class="comment"># 返回一个queryset集合,如果没有查询到，返回一个空集合,不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、 get(**kwargs):         返回与所给筛选条件相匹配的对象，返回结果有且只有一个，如果符合筛选条件的  对象超过一个或者没有都会抛出错误。</span></span><br><span class="line">question = Question.objects.get(pk=<span class="number">1</span>)  <span class="comment"># 返回一个queryset对象，并且只会得到一个数据，如果没有查询到，会报DoesNotExist的错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、 exclude(**kwargs):     它包含了与所给筛选条件不匹配的对象</span></span><br><span class="line">question = Question.objects.exclude(id__in=[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])  <span class="comment"># 筛选id除了11，22，33外的，其它的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、 values(*field):        返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列                              model的实例化对象，而是一个可迭代的字典序列</span></span><br><span class="line">question = Question.objects.values()</span><br><span class="line"><span class="comment"># 返回结果：[&#123;"id": 1, "question_name": "xxxxxxx"&#125;, &#123;"id": 2, "question_name": "xxxxxxx"&#125;, ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、 values_list(*field):   它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序   列</span></span><br><span class="line">question = Question.objects.values_list()</span><br><span class="line"><span class="comment"># 返回结果：[(1, "xxxxxxx"), (2, "xxxxxxx"), ....]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、 order_by(*field):      对查询结果排序</span></span><br><span class="line">user_list = User.objects.order_by(<span class="string">"-id"</span>)  <span class="comment"># “-” 按id降序排列</span></span><br><span class="line">user_list = User.objects.order_by()  <span class="comment"># 按id升序排列（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、 reverse():             对查询结果反向排序，请注意reverse()通常只能在具有已定义顺序的QuerySet上调用(在model类的Meta中指定ordering或调用order_by()方法)。</span></span><br><span class="line">user = User.objects.all().reverse()  <span class="comment"># 把查询的结果进行反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9、 distinct():            从返回结果中剔除重复纪录(如果你查询跨越多个表，可能在计算QuerySet时得到 重复的结果。此时可以使用distinct()，注意只有在PostgreSQL中支持按字段  去重。)</span></span><br><span class="line">Question.objects.all().distinct()  <span class="comment"># 把结果中重复的记录剔除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10、 count():              返回数据库中匹配查询(QuerySet)的对象数量。</span></span><br><span class="line">user_count = User.objects.count()  <span class="comment"># 返回user表中的用户数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11、 first():              返回第一条记录</span></span><br><span class="line">User.objects.first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12、 last():               返回最后一条记录</span></span><br><span class="line">User.objects.last()    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 13、 exists():             如果QuerySet包含数据，就返回True，否则返回False</span></span><br><span class="line">user = User.objects.filter(pk=<span class="number">1</span>).exists()  <span class="comment"># 返回True 或者False</span></span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    print(<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure><h3 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h3><p><strong>在 ORM 层面，这些查询条件都是使用 field + __ + condition 的方式来使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 精确的 等于,如果提供一个None,SQL解析为Null</span></span><br><span class="line">article = Article.objects.get(id__exact=<span class="number">14</span>)</span><br><span class="line">article = Article.objects.get(id__exact=<span class="literal">None</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">对应sql</span></span><br><span class="line"><span class="string">select ... from article where id=14;</span></span><br><span class="line"><span class="string">select ... from article where id IS NULL;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># iexact 使用like查询</span></span><br><span class="line">article = Article.objects.filter(title__iexact=<span class="string">'hello world'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... from article where title like 'hello world'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 包含:contains,区分大小写</span></span><br><span class="line">articles = Article.objects.filter(title__contains=<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于select ... where title like binary '%hello%';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># icontains 忽略大小写</span></span><br><span class="line">articles = Article.objects.filter(title__icontains=<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... where title like '%hello%';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># in 提取那些给定的field的值是否在给定的容器中。容器可以为list、tuple或者任何一个可以迭代的对</span></span><br><span class="line">象，<span class="comment"># 包括QuerySet对象</span></span><br><span class="line">articles = Article.objects.filter(id__in=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... where id in (1,3,4)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 当然也可以传递一个QuerySet对象进去。示例代码如下：</span></span><br><span class="line">inner_qs = Article.objects.filter(title__contains=<span class="string">'hello'</span>)</span><br><span class="line">categories = Category.objects.filter(article__in=inner_qs)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于:以上代码的意思是获取那些文章标题包含hello的所有分类。</span></span><br><span class="line"><span class="string">select ...from category where article.id in (select id from article where title</span></span><br><span class="line"><span class="string">like '%hello%');</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># gt 大于</span></span><br><span class="line">articles = Article.objects.filter(id__gt=<span class="number">4</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于 select ... where id &gt; 4;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># gte 大于等于</span></span><br><span class="line"><span class="comment"># lt 小于</span></span><br><span class="line"><span class="comment"># lte 小于等于</span></span><br><span class="line"><span class="comment"># startswidth 开始,大小写敏感</span></span><br><span class="line">articles = Article.objects.filter(title__startswith=<span class="string">'hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于: select ... where title like 'hello%'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># istartswidth 大小写不敏感</span></span><br><span class="line"><span class="comment"># endswidth 以**结尾,大小写敏感</span></span><br><span class="line">articles = Article.objects.filter(title__endswith=<span class="string">'world'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于:select ... where title like '%world';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># iendswidht 以**结尾,忽略大小写</span></span><br><span class="line"><span class="comment"># range 判断某个field的值是否在给定的区间中, 两个范围之间</span></span><br><span class="line"><span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> make_aware</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">start_date = make_aware(datetime(year=<span class="number">2018</span>,month=<span class="number">1</span>,day=<span class="number">1</span>))</span><br><span class="line">end_date = make_aware(datetime(year=<span class="number">2018</span>,month=<span class="number">3</span>,day=<span class="number">29</span>,hour=<span class="number">16</span>))</span><br><span class="line">articles = Article.objects.filter(pub_date__range=(start_date,end_date))</span><br><span class="line"><span class="comment"># isnull</span></span><br><span class="line">articles = Article.objects.filter(pub_date__isnull=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># regex和iregex： 正则</span></span><br><span class="line">articles = Article.objects.filter(title__regex=<span class="string">r'^hello'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价:select ... where title regexp binary '^hello';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以上代码的意思是提取所有发布时间在2018/1/1到2018/12/12之间的文章。</span></span><br><span class="line"><span class="string">将翻译成以下的SQL语句：</span></span><br><span class="line"><span class="string">select ... from article where pub_time between '2018-01-01' and '2018-12-12'。</span></span><br><span class="line"><span class="string">需要注意的是，以上提取数据，不会包含最后一个值。也就是不会包含2018/12/12的文章。</span></span><br><span class="line"><span class="string">而且另外一个重点，因为我们在settings.py中指定了USE_TZ=True，并且设置了</span></span><br><span class="line"><span class="string">TIME_ZONE='Asia/Shanghai'，因此我们在提取数据的时候要使用django.utils.timezone.make_aware</span></span><br><span class="line"><span class="string">先将datetime.datetime从navie时间转换为aware时间。make_aware会将指定的时间转换为TIME_ZONE中</span></span><br><span class="line"><span class="string">指定的时区的时间。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="根据关联的表查"><a href="#根据关联的表查" class="headerlink" title="根据关联的表查"></a>根据关联的表查</h3><p><strong>假如现在有两个 ORM 模型，一个是 Article ，一个是 Category 。代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""文章分类表"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""文章表"""</span></span><br><span class="line">  title = models.CharField(max_length=<span class="number">100</span>,null=<span class="literal">True</span>)</span><br><span class="line">  category = models.ForeignKey(<span class="string">"Category"</span>,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p><strong>比如想要获取文章标题中包含”hello”的所有的分类。那么可以通过以下代码来实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories = Category.object.filter(article__title__contains(<span class="string">"hello"</span>))</span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p><strong>聚合函数是通过 aggregate 方法来实现的。</strong></p><ul><li><p><strong>Avg ：求平均值。比如想要获取所有图书的价格平均值。那么可以使用以下代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">result = Book.objects.aggregate(Avg(<span class="string">'price'</span>))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>以上的打印结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;price__avg&quot;:23.0&#125;</span><br></pre></td></tr></table></figure><p>其中 price__avg 的结构是根据 field__avg 规则构成的。如果想要修改默认的名字，那么可以将 Avg 赋值<br>给一个关键字参数。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">result = Book.objects.aggregate(my_avg=Avg(<span class="string">'price'</span>))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>那么以上的结果打印为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"my_avg"</span>:<span class="number">23</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Count ：获取指定的对象的个数。示例代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">result = Book.objects.aggregate(book_num=Count(<span class="string">'id'</span>))</span><br></pre></td></tr></table></figure><p>以上的 result 将返回 Book 表中总共有多少本图书。  Count 类中，还有另外一个参数叫做 distinct ，默<br>认是等于 False ，如果是等于 True ，那么将去掉那些重复的值。比如要获取作者表中所有的不重复的邮箱<br>总共有多少个，那么可以通过以下代码来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djang.db.models <span class="keyword">import</span> Count</span><br><span class="line">result = Author.objects.aggregate(count=Count(<span class="string">'email'</span>,distinct=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>Max 和 Min ：获取指定对象的最大值和最小值。比如想要获取 Author 表中，最大的年龄和最小的年龄分别</strong><br><strong>是多少。那么可以通过以下代码来实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min</span><br><span class="line">result = Author.objects.aggregate(Max(<span class="string">'age'</span>),Min(<span class="string">'age'</span>))</span><br></pre></td></tr></table></figure><p>如果最大的年龄是88,最小的年龄是18。那么以上的result将为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"age__max"</span>:<span class="number">88</span>,<span class="string">"age__min"</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Sum ：求指定对象的总和。比如要求图书的销售总额。那么可以使用以下代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djang.db.models <span class="keyword">import</span> Sum</span><br><span class="line">result =</span><br><span class="line">Book.objects.annotate(total=Sum(<span class="string">"bookstore__price"</span>)).values(<span class="string">"name"</span>,<span class="string">"total"</span>)</span><br></pre></td></tr></table></figure><p>以上的代码 annotate 的意思是给 Book 表在查询的时候添加一个字段叫做 total ，这个字段的数据来源是<br>从 BookStore 模型的 price 的总和而来。 values 方法是只提取 name 和 total 两个字段的值。</p><p>更多的聚合函数请参考官方文档：<a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#aggregation-functions" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.0/ref/models/querysets/#aggregation-functions</a></p></li></ul><h3 id="aggregate和annotate的区别："><a href="#aggregate和annotate的区别：" class="headerlink" title="aggregate和annotate的区别："></a>aggregate和annotate的区别：</h3><ul><li>aggregate ：返回使用聚合函数后的字段和值。</li><li>annotate ：在原来模型字段的基础之上添加一个使用了聚合函数的字段，并且在使用聚合函数的时候，会<br>使用当前这个模型的主键进行分组（group by）。 比如以上 Sum 的例子，如果使用的是 annotate ，那么将<br>在每条图书的数据上都添加一个字段叫做 total ，计算这本书的销售总额。 而如果使用的是 aggregate ，<br>那么将求所有图书的销售总额。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""作者模型"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">  age = models.IntegerField()</span><br><span class="line">  email = models.EmailField()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'author'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""出版社模型"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'publisher'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""图书模型"""</span></span><br><span class="line">  name = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">  pages = models.IntegerField()</span><br><span class="line">  price = models.FloatField()</span><br><span class="line">  rating = models.FloatField()</span><br><span class="line">  author = models.ForeignKey(Author,on_delete=models.CASCADE)</span><br><span class="line">  publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'book'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookOrder</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  <span class="string">"""图书订单模型"""</span></span><br><span class="line">  book = models.ForeignKey(<span class="string">"Book"</span>,on_delete=models.CASCADE)</span><br><span class="line">  price = models.FloatField()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table = <span class="string">'book_order'</span></span><br></pre></td></tr></table></figure><h3 id="F表达式和Q表达式："><a href="#F表达式和Q表达式：" class="headerlink" title="F表达式和Q表达式："></a>F表达式和Q表达式：</h3><h4 id="F表达式："><a href="#F表达式：" class="headerlink" title="F表达式："></a>F表达式：</h4><p>F表达式 是用来优化 ORM 操作数据库的。比如我们要将公司所有员工的薪水都增加1000元，如果按照正常的流<br>程，应该是先从数据库中提取所有的员工工资到Python内存中，然后使用Python代码在员工工资的基础之上增加<br>1000元，最后再保存到数据库中。这里面涉及的流程就是，首先从数据库中提取数据到Python内存中，然后在<br>Python内存中做完运算，之后再保存到数据库中。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">employees = Employee.objects.all()</span><br><span class="line"><span class="keyword">for</span> employee <span class="keyword">in</span> employees:</span><br><span class="line">  employee.salary += <span class="number">1000</span></span><br><span class="line">  employee.save()</span><br></pre></td></tr></table></figure><p>而我们的 F表达式 就可以优化这个流程，他可以不需要先把数据从数据库中提取出来，计算完成后再保存回去，他可以直接执行 SQL语句 ，就将员工的工资增加1000元。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djang.db.models <span class="keyword">import</span> F</span><br><span class="line">Employee.object.update(salary=F(<span class="string">"salary"</span>)+<span class="number">1000</span>)</span><br><span class="line"><span class="comment"># 直接把sql传输到数据库!!!!!</span></span><br></pre></td></tr></table></figure><p>F表达式 并不会马上从数据库中获取数据，而是在生成 SQL 语句的时候，动态的获取传给 F表达式 的值。<br>比如如果想要获取作者中， name 和 email 相同的作者数据。如果不使用 F表达式 ，那么需要使用以下代码来完<br>成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">authors = Author.objects.all()</span><br><span class="line"><span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line"><span class="keyword">if</span> author.name == author.email:</span><br><span class="line">   print(author)</span><br></pre></td></tr></table></figure><p>如果使用 F表达式 ，那么一行代码就可以搞定。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">authors = Author.objects.filter(name=F(<span class="string">"email"</span>))</span><br><span class="line"><span class="comment"># where  email = name</span></span><br></pre></td></tr></table></figure><h4 id="Q表达式："><a href="#Q表达式：" class="headerlink" title="Q表达式："></a>Q表达式：</h4><p>如果想要实现所有价格高于100元，并且评分达到9.0以上评分的图书。那么可以通过以下代码来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books = Book.objects.filter(price__gte=<span class="number">100</span>,rating__gte=<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>以上这个案例是一个并集查询，可以简单的通过传递多个条件进去来实现。 但是如果想要实现一些复杂的查询语<br>句，比如要查询所有价格低于10元，或者是评分低于9分的图书。那就没有办法通过传递多个条件进去实现了。这<br>时候就需要使用 Q表达式 来实现了。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">books = Book.objects.filter(Q(price__lte=<span class="number">10</span>) | Q(rating__lte=<span class="number">9</span>))</span><br></pre></td></tr></table></figure><p>以上是进行或运算，当然还可以进行其他的运算，比如有 &amp; 和 ~（非） 等。一些用 Q 表达式的例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="comment"># 获取id等于3的图书</span></span><br><span class="line">books = Book.objects.filter(Q(id=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 获取id等于3，或者名字中包含文字"记"的图书</span></span><br><span class="line">books = Book.objects.filter(Q(id=<span class="number">3</span>)|Q(name__contains(<span class="string">"记"</span>)))</span><br><span class="line"><span class="comment"># 获取价格大于100，并且书名中包含"记"的图书</span></span><br><span class="line">books = Book.objects.filter(Q(price__gte=<span class="number">100</span>)&amp;Q(name__contains(<span class="string">"记"</span>)))</span><br><span class="line"><span class="comment"># 获取书名包含“记”，但是id不等于3的图书</span></span><br><span class="line">books = Book.objects.filter(Q(name__contains=<span class="string">'记'</span>) &amp; ~Q(id=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data</span></span><br><span class="line">针对某些date或者datetime类型的字段。可以指定date的范围。并且这个时间过滤，还可以使用链式调用。示</span><br><span class="line">例代码如下：</span><br><span class="line">articles = Article.objects.filter(pub_date__date=date(<span class="number">2018</span>,<span class="number">3</span>,<span class="number">29</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以上代码的意思是查找时间为2018/3/29这一天发表的所有文章。</span></span><br><span class="line"><span class="string">将翻译成以下的sql语句：</span></span><br><span class="line"><span class="string">select ... WHERE DATE(CONVERT_TZ(`front_article`.`pub_date`, 'UTC',</span></span><br><span class="line"><span class="string">'Asia/Shanghai')) = 2018-03-29</span></span><br><span class="line"><span class="string">注意，因为默认情况下MySQL的表中是没有存储时区相关的信息的。因此我们需要下载一些时区表的文件，然后添</span></span><br><span class="line"><span class="string">加到Mysql的配置路径中。如果你用的是windows操作系统。那么在</span></span><br><span class="line"><span class="string">http://dev.mysql.com/downloads/timezones.html下载timezone_2018d_posix.zip - POSIX</span></span><br><span class="line"><span class="string">standard。然后将下载下来的所有文件拷贝到C:\ProgramData\MySQL\MySQL Server 5.7\Data\mysql</span></span><br><span class="line"><span class="string">中，如果提示文件名重复，那么选择覆盖即可。</span></span><br><span class="line"><span class="string">如果用的是linux或者mac系统，那么在命令行中执行以下命令：mysql_tzinfo_to_sql</span></span><br><span class="line"><span class="string">/usr/share/zoneinfo | mysql -D mysql -u root -p，然后输入密码，从系统中加载时区文件更新到</span></span><br><span class="line"><span class="string">mysql中。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># year 根据年份进行查找</span></span><br><span class="line">articles = Article.objects.filter(pub_date__year=<span class="number">2018</span>)</span><br><span class="line">articles = Article.objects.filter(pub_date__year__gte=<span class="number">2017</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">等价于:</span></span><br><span class="line"><span class="string">select ... where pub_date between '2018-01-01' and '2018-12-31';</span></span><br><span class="line"><span class="string">select ... where pub_date &gt;= '2017-01-01';</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># month 同year,根据月份查</span></span><br><span class="line"><span class="comment"># day  同year,根据日期查</span></span><br><span class="line"><span class="comment"># week_day Django 1.11新增的查找方式。同year，根据星期几进行查找。1表示星期天，7表示星期六，2-6代表的是星期一到星期五。</span></span><br><span class="line"><span class="comment"># time 根据时间查</span></span><br><span class="line">articles = Article.objects.filter(pub_date__time=datetime.time(<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>));</span><br><span class="line"><span class="comment"># 以上的代码是获取每一天中12点12分12秒发表的所有文章。</span></span><br></pre></td></tr></table></figure><p>更多的关于时间的过滤，请参考Django官方文档：<br><a href="https://docs.djangoproject.com/en/2.0/ref/models/querysets/#range。" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.0/ref/models/querysets/#range。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习Django之前的准备工作</title>
      <link href="/2020/03/12/8/"/>
      <url>/2020/03/12/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="学习Django之前的准备工作"><a href="#学习Django之前的准备工作" class="headerlink" title="学习Django之前的准备工作"></a>学习Django之前的准备工作</h3><p>准备好开发环境，python3.6，django2.1.8。</p><p>请确安装了python3.6或者更高的版本。并且在python下安装了virtualenv。</p><p>virtualenv安装详情请参考<a href=".\Django--day01_2虚拟环境.md">Django–day01_2虚拟环境.md</a></p><h4 id="安装Django环境"><a href="#安装Django环境" class="headerlink" title="安装Django环境"></a>安装Django环境</h4><h5 id="1、进入虚拟环境"><a href="#1、进入虚拟环境" class="headerlink" title="1、进入虚拟环境"></a>1、进入虚拟环境</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon my_env</span><br></pre></td></tr></table></figure><h5 id="2、安装django"><a href="#2、安装django" class="headerlink" title="2、安装django"></a>2、安装django</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==<span class="number">2.1</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><h5 id="3、退出虚拟环境"><a href="#3、退出虚拟环境" class="headerlink" title="3、退出虚拟环境"></a>3、退出虚拟环境</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django模型之Meta常用选项</title>
      <link href="/2020/03/12/7/"/>
      <url>/2020/03/12/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Django模型之Meta常用选项"><a href="#Django模型之Meta常用选项" class="headerlink" title="Django模型之Meta常用选项"></a>Django模型之Meta常用选项</h3><p>Django模型类的Meta是一个内部类，它用于定义一些Django模型类的行为特性。而可用的选项大致包含以下几类</p><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>这个属性是定义当前的模型是不是一个抽象类。所谓抽象类是不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。</p><p>Options.abstract<br>如果abstract = True 这个model就是一个抽象类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""大多数模型的父类模型"""</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">'创建时间'</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">'修改时间'</span>)</span><br><span class="line">    is_delete = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">'删除标记'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span>  <span class="comment"># 抽象模型类</span></span><br></pre></td></tr></table></figure><h3 id="db-table"><a href="#db-table" class="headerlink" title="db_table"></a>db_table</h3><p>db_table是指定自定义数据库表明的。Django有一套默认的按照一定规则生成数据模型对应的数据库表明。<br>Options.db_table<br>定义该model在数据库中的表名称<br>　　db_table = ‘Students’<br>如果你想使用自定义的表名，可以通过以下该属性<br>　　table_name = ‘my_owner_table’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    省市级联</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    area_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    pid = models.ForeignKey(<span class="string">"self"</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">"areainfo"</span>   <span class="comment"># 创建数据库时，生成的表名</span></span><br></pre></td></tr></table></figure><h3 id="verbose-name"><a href="#verbose-name" class="headerlink" title="verbose_name"></a>verbose_name</h3><p>verbose_name的意思很简单，就是给你的模型类起一个更可读的名字一般定义为中文，我们：<br>verbose_name = “学校”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    省市级联</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    area_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    pid = models.ForeignKey(<span class="string">"self"</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">"areainfo"</span>   <span class="comment"># 创建数据库时，生成的表名</span></span><br><span class="line">        verbose_name = <span class="string">"省市县"</span></span><br></pre></td></tr></table></figure><h3 id="verbose-name-plural"><a href="#verbose-name-plural" class="headerlink" title="verbose_name_plural"></a>verbose_name_plural</h3><p>这个选项是指定，模型的复数形式是什么，比如：<br>verbose_name_plural = “学校”<br>如果不指定Django会自动在模型名称后加一个’s’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    省市级联</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    area_name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    pid = models.ForeignKey(<span class="string">"self"</span>, on_delete=models.CASCADE, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">"areainfo"</span>   <span class="comment"># 创建数据库时，生成的表名</span></span><br><span class="line">        verbose_name = <span class="string">"省市县"</span></span><br><span class="line">        verbose_name_plural = verbose_name  <span class="comment"># 在django的admin中，显示的名称</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决跨域问题------django解决方案</title>
      <link href="/2020/03/12/6/"/>
      <url>/2020/03/12/6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="解决跨域问题——django解决方案"><a href="#解决跨域问题——django解决方案" class="headerlink" title="解决跨域问题——django解决方案"></a>解决跨域问题——django解决方案</h3><p><strong>1、安装django-core-headers</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-core-headers</span><br></pre></td></tr></table></figure><p><strong>2、配置settings文件</strong></p><ul><li><p><strong>加入到INSTALLED_APPS下面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># 第三方框架</span></span><br><span class="line">    <span class="string">'corsheaders'</span>,  <span class="comment"># 解决跨域问题</span></span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><strong>配置MIDDLEWARE中间件，放在SessionMiddleware和CommonMiddleware中间。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,  <span class="comment"># 解决跨域问题，必须放在这个位置，加载顺序</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p><strong>配置允许跨域访问的域名</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span>   <span class="comment"># 解决跨域，配置允许跨域访问的域名，为True时，允许所有的域名</span></span><br></pre></td></tr></table></figure><p><strong>注意：这三项都是在django项目下的seetings中配置的</strong></p></li></ul><h3 id="解决跨域问题——VUE解决方案"><a href="#解决跨域问题——VUE解决方案" class="headerlink" title="解决跨域问题——VUE解决方案"></a>解决跨域问题——VUE解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">    &#39;&#x2F;api&#39;: &#123;  &#x2F;&#x2F;使用&quot;&#x2F;api&quot;来代替&quot;http:&#x2F;&#x2F;f.apiplus.c&quot; </span><br><span class="line">    target: &#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;&#39;, &#x2F;&#x2F;源地址 </span><br><span class="line">    changeOrigin: true, &#x2F;&#x2F;改变源 </span><br><span class="line">    pathRewrite: &#123; </span><br><span class="line">      &#39;^&#x2F;api&#39;: &#39;&#39; &#x2F;&#x2F;路径重写 </span><br><span class="line">      &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h3><p><strong>1、安装axios</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save axios</span><br></pre></td></tr></table></figure><p><strong>2、配制axios,在src文件下的mian.js中配制</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">Vue.prototype.axios = axios</span><br></pre></td></tr></table></figure><p><strong>3、axios使用</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">axios完整写法：</span><br><span class="line"></span><br><span class="line">this.axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then((res)=&gt;&#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;).catch((error)=&gt;&#123;</span><br><span class="line">  console.log(error)</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">post请求</span><br><span class="line"></span><br><span class="line">this.axios.post('',&#123;&#125;).then((res)=&gt;&#123;&#125;).catch((error)=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line">get请求</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">    export default&#123;</span><br><span class="line">      name: <span class="string">'card'</span>,</span><br><span class="line">      mounted:function () &#123;</span><br><span class="line">        //vue页面加载时自动执行</span><br><span class="line">        this.send()</span><br><span class="line">      &#125;,</span><br><span class="line">      data:&#123;</span><br><span class="line">        url_array: []</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        </span><br><span class="line">        send()&#123;</span><br><span class="line">          var self = this</span><br><span class="line">              axios(&#123;</span><br><span class="line">                  method:<span class="string">'get'</span>,</span><br><span class="line">                  url:<span class="string">'http://127.0.0.1:8000/myapp/api_type/'</span></span><br><span class="line">              &#125;).then(function(res)&#123;</span><br><span class="line">                  console.log(res.data.li_list);</span><br><span class="line">                  self.url_array = res.data.li_list</span><br><span class="line">                  console.log(self.url_array)</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令大全</title>
      <link href="/2019/12/08/4/"/>
      <url>/2019/12/08/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>Vue指令大全</strong></p><ol><li><p>v-text<br>v-text主要用来更新textContent，可以等同于JS的text属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>这两者等价：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-html<br>双大括号的方式会将数据解释为纯文本，而非HTML。为了输出真正的HTML，可以用v-html指令。它等同于JS的innerHtml属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html&#x3D;&quot;rawHtml&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这个div的内容将会替换成属性值rawHtml，直接作为HTML进行渲染。</p></li></ol><ol start="3"><li><p>v-pre<br>v-pre主要用来跳过这个元素和它的子元素编译过程。可以用来显示原始的Mustache标签。跳过大量没有指令的节点加快编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span v-pre&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;span&gt;  &#x2F;&#x2F;这条语句不进行编译</span><br><span class="line">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>最终仅显示第二个span的内容</p></li><li><p>v-cloak<br>这个指令是用来保持在元素上直到关联实例结束时进行编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">      el:&#39;#app&#39;,</span><br><span class="line">      data:&#123;</span><br><span class="line">        message:&#39;hello world&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在页面加载时会闪烁，先显示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>然后才会编译为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    hello world!</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-once<br>v-once关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-once&gt;This will never change:&#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;  &#x2F;&#x2F;单个元素</span><br><span class="line">&lt;div v-once&gt;&#x2F;&#x2F;有子元素</span><br><span class="line">    &lt;h1&gt;comment&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;my-component v-once:comment&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;my-component&gt;  &#x2F;&#x2F;组件</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;i in list&quot;&gt;&#123;&#123;i&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>上面的例子中，msg,list即使产生改变，也不会重新渲染。</p></li><li><p>v-if<br>v-if可以实现条件渲染，Vue会根据表达式的值的真假条件来渲染元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-if&#x3D;&quot;ok&quot;&gt;yes&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>如果属性值ok为true，则显示。否则，不会渲染这个元素。</p></li><li><p>v-else</p></li></ol><p>v-else是搭配v-if使用的，它必须紧跟在v-if或者v-else-if后面，否则不起作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-if&#x3D;&quot;ok&quot;&gt;yes&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a v-else&gt;No&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><ol start="8"><li>v-else-if<br>v-else-if充当v-if的else-if块，可以链式的使用多次。可以更加方便的实现switch语句。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;A&#39;&quot;&gt;</span><br><span class="line">    A</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;B&#39;&quot;&gt;</span><br><span class="line">    B</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;C&#39;&quot;&gt;</span><br><span class="line">    C</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">    Not A,B,C</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>v-show<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-show&#x3D;&quot;ok&quot;&gt;hello world&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>也是用于根据条件展示元素。和v-if不同的是，如果v-if的值是false，则这个元素被销毁，不在dom中。但是v-show的元素会始终被渲染并保存在dom中，它只是简单的切换css的dispaly属性。</li></ol><p>注意：v-if有更高的切换开销<br>v-show有更高的初始渲染开销。<br>因此，如果要非常频繁的切换，则使用v-show较好；如果在运行时条件不太可能改变，则v-if较好</p><ol start="10"><li>v-for<br>用v-for指令根据遍历数组来进行渲染<br>有下面两种遍历形式 //使用of<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(item,index) in items&quot;&gt;&lt;&#x2F;div&gt;   &#x2F;&#x2F;使用in，index是一个可选参数，表示当前项的索引</span><br><span class="line">&lt;div v-for&#x3D;&quot;item of items&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><p>下面是一个例子，并且在v-for中，拥有对父作用域属性的完全访问权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">        &#123;&#123;parent&#125;&#125;-&#123;&#123;item.text&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var example &#x3D; new Vue(&#123;</span><br><span class="line">      el:&#39;#app&#39;,</span><br><span class="line">      data:&#123;</span><br><span class="line">        parent:&#39;父作用域&#39;</span><br><span class="line">        items:[</span><br><span class="line">          &#123;text:&#39;文本1&#39;&#125;,</span><br><span class="line">          &#123;text:&#39;文本2&#39;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>会被渲染为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;li&gt;父作用域-文本1&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;父作用域-文本2&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>注意：当v-for和v-if同处于一个节点时，v-for的优先级比v-if更高。这意味着v-if将运行在每个v-for循环中</p><ol start="11"><li>v-bind<br>v-bind用来动态的绑定一个或者多个特性。没有参数时，可以绑定到一个包含键值对的对象。常用于动态绑定class和style。以及href等。<br>简写为一个冒号【 ：】</li></ol><p>&lt;1&gt;对象语法：</p><p>//进行类切换的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--当data里面定义的isActive等于true时，is-active这个类才会被添加起作用--&gt;</span><br><span class="line">    &lt;!--当data里面定义的hasError等于true时，text-danger这个类才会被添加起作用--&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;&#123;&#39;is-active&#39;:isActive, &#39;text-danger&#39;:hasError&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isActive: true,  </span><br><span class="line">            hasError: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>渲染结果：</p><!--因为hasError: false，所以text-danger不被渲染--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class &#x3D; &quot;is-active&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>&lt;2&gt;数组语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--数组语法：errorClass在data对应的类一定会添加--&gt;</span><br><span class="line">    &lt;!--is-active是对象语法，根据activeClass对应的取值决定是否添加--&gt;</span><br><span class="line">    &lt;p :class&#x3D;&quot;[&#123;&#39;is-active&#39;:activeClass&#125;,errorClass]&quot;&gt;12345&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            activeClass: false,</span><br><span class="line">            errorClass: &#39;text-danger&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>渲染结果：</p><!--因为activeClass: false，所以is-active不被渲染--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class &#x3D; &quot;text-danger&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>&lt;3&gt;直接绑定数据对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--在vue实例的data中定义了classObject对象，这个对象里面是所有类名及其真值--&gt;</span><br><span class="line">    &lt;!--当里面的类的值是true时会被渲染--&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;classObject&quot;&gt;12345&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            classObject:&#123;</span><br><span class="line">                &#39;is-active&#39;: false,</span><br><span class="line">                &#39;text-danger&#39;:true</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>渲染结果：</p><!--因为'is-active': false，所以is-active不被渲染--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class &#x3D; &quot;text-danger&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol start="12"><li>v-model<br>这个指令用于在表单上创建双向数据绑定。<br>v-model会忽略所有表单元素的value、checked、selected特性的初始值。因为它选择Vue实例数据做为具体的值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input v-model&#x3D;&quot;somebody&quot;&gt;</span><br><span class="line">    &lt;p&gt;hello &#123;&#123;somebody&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            somebody:&#39;小明&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>这个例子中直接在浏览器input中输入别的名字，下面的p的内容会直接跟着变。这就是双向数据绑定。</li></ol><p>v-model修饰符<br>&lt;1&gt; .lazy<br>默认情况下，v-model同步输入框的值和数据。可以通过这个修饰符，转变为在change事件再同步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.lazy&#x3D;&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><p>&lt;2&gt; .number<br>自动将用户的输入值转化为数值类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.number&#x3D;&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><p>&lt;3&gt; .trim<br>自动过滤用户输入的首尾空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim&#x3D;&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><ol start="13"><li>v-on<br>v-on主要用来监听dom事件，以便执行一些代码块。表达式可以是一个方法名。<br>简写为：【 @ 】<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;consoleLog&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            consoleLog:function (event) &#123;</span><br><span class="line">                console.log(1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>事件修饰符</li></ol><p>.stop 阻止事件继续传播<br>.prevent 事件不再重载页面<br>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理<br>.self 只当在 event.target 是当前元素自身时触发处理函数<br>.once 事件将只会触发一次<br>.passive 告诉浏览器你不想阻止事件的默认行为</p><!-- 阻止单击事件继续传播 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><!-- 提交事件不再重载页面 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;onSubmit&quot;&gt;&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><!-- 修饰符可以串联 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><!-- 只有修饰符 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><!-- 添加事件监听器时使用事件捕获模式 --><!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><!-- 只当在 event.target 是当前元素自身时触发处理函数 --><!-- 即事件不是从内部元素触发的 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-on:click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><!-- 点击事件将只会触发一次 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click.once&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --><!-- 而不会等待 `onScroll` 完成  --><!-- 这其中包含 `event.preventDefault()` 的情况 --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-on:scroll.passive&#x3D;&quot;onScroll&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
